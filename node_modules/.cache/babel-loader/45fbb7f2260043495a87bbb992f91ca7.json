{"ast":null,"code":"import _classCallCheck from \"/Users/lauraalpinto/Desktop/insecta/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/lauraalpinto/Desktop/insecta/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/lauraalpinto/Desktop/insecta/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/lauraalpinto/Desktop/insecta/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/lauraalpinto/Desktop/insecta/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/lauraalpinto/Desktop/insecta/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/lauraalpinto/Desktop/insecta/src/components/Navbar.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { MENU } from \"../redux\";\n\nvar Navbar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Navbar, _Component);\n\n  function Navbar(props) {\n    var _this;\n\n    _classCallCheck(this, Navbar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Navbar).call(this, props));\n    _this.state = {\n      backgroundColor: \"transparent\"\n    };\n    _this.openMenu = _this.openMenu.bind(_assertThisInitialized(_this));\n    _this.listenToScroll = _this.listenToScroll.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Navbar, [{\n    key: \"openMenu\",\n    value: function openMenu() {\n      console.log(this.props.menu);\n      this.props.changeMenuState(true);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener(\"scroll\", this.listenToScroll);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener(\"scroll\", this.listenToScroll);\n    }\n  }, {\n    key: \"listenToScroll\",\n    value: function listenToScroll(e) {\n      console.log(window.scrollY);\n\n      if (window.scrollY > 400) {\n        this.setState({\n          backgroundColor: \"white\"\n        });\n      } else {\n        this.setState({\n          backgroundColor: \"transparent\"\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"Navbar\",\n        style: {\n          backgroundColor: this.state.backgroundColor\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"button\",\n        onClick: this.openMenu,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"button__icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"button__icon__bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"\\xA0\"), React.createElement(\"span\", {\n        className: \"button__icon__bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"\\xA0\")), React.createElement(\"span\", {\n        className: \"button__text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"Menu\")));\n    }\n  }]);\n\n  return Navbar;\n}(Component); //Obter Redux State\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    menu: state.menu\n  };\n}; //Mudar Redux State\n\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    changeMenuState: function changeMenuState(menu) {\n      dispatch(MENU(menu));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar);","map":{"version":3,"sources":["/Users/lauraalpinto/Desktop/insecta/src/components/Navbar.js"],"names":["React","Component","connect","MENU","Navbar","props","state","backgroundColor","openMenu","bind","listenToScroll","console","log","menu","changeMenuState","window","addEventListener","removeEventListener","e","scrollY","setState","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,UAArB;;IAEMC,M;;;;;AACJ,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,gFAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,eAAe,EAAE;AADN,KAAb;AAIA,UAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcC,IAAd,+BAAhB;AACA,UAAKC,cAAL,GAAsB,MAAKA,cAAL,CAAoBD,IAApB,+BAAtB;AARiB;AASlB;;;;+BACU;AACTE,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,KAAL,CAAWQ,IAAvB;AACA,WAAKR,KAAL,CAAWS,eAAX,CAA2B,IAA3B;AACD;;;wCAEmB;AAClBC,MAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKN,cAAvC;AACD;;;2CAEsB;AACrBK,MAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqC,KAAKP,cAA1C;AACD;;;mCAEcQ,C,EAAG;AAChBP,MAAAA,OAAO,CAACC,GAAR,CAAYG,MAAM,CAACI,OAAnB;;AACA,UAAIJ,MAAM,CAACI,OAAP,GAAiB,GAArB,EAA0B;AACxB,aAAKC,QAAL,CAAc;AAAEb,UAAAA,eAAe,EAAE;AAAnB,SAAd;AACD,OAFD,MAEO;AACL,aAAKa,QAAL,CAAc;AAAEb,UAAAA,eAAe,EAAE;AAAnB,SAAd;AACD;AACF;;;6BAEQ;AACP,aACE;AACE,QAAA,SAAS,EAAC,QADZ;AAEE,QAAA,KAAK,EAAE;AAAEA,UAAAA,eAAe,EAAE,KAAKD,KAAL,CAAWC;AAA9B,SAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAwB,QAAA,OAAO,EAAE,KAAKC,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,SAAS,EAAC,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAM,QAAA,SAAS,EAAC,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,CADF,EAKE;AAAM,QAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,CAJF,CADF;AAcD;;;;EAhDkBP,S,GAmDrB;;;AACA,IAAMoB,eAAe,GAAG,SAAlBA,eAAkB,CAASf,KAAT,EAAgB;AACtC,SAAO;AACLO,IAAAA,IAAI,EAAEP,KAAK,CAACO;AADP,GAAP;AAGD,CAJD,C,CAMA;;;AACA,IAAMS,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACrC,SAAO;AACLT,IAAAA,eAAe,EAAE,yBAAAD,IAAI,EAAI;AACvBU,MAAAA,QAAQ,CAACpB,IAAI,CAACU,IAAD,CAAL,CAAR;AACD;AAHI,GAAP;AAKD,CAND;;AAQA,eAAeX,OAAO,CACpBmB,eADoB,EAEpBC,kBAFoB,CAAP,CAGblB,MAHa,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { MENU } from \"../redux\";\n\nclass Navbar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      backgroundColor: \"transparent\"\n    };\n\n    this.openMenu = this.openMenu.bind(this);\n    this.listenToScroll = this.listenToScroll.bind(this);\n  }\n  openMenu() {\n    console.log(this.props.menu);\n    this.props.changeMenuState(true);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"scroll\", this.listenToScroll);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"scroll\", this.listenToScroll);\n  }\n\n  listenToScroll(e) {\n    console.log(window.scrollY);\n    if (window.scrollY > 400) {\n      this.setState({ backgroundColor: \"white\" });\n    } else {\n      this.setState({ backgroundColor: \"transparent\" });\n    }\n  }\n\n  render() {\n    return (\n      <div\n        className=\"Navbar\"\n        style={{ backgroundColor: this.state.backgroundColor }}\n      >\n        <div className=\"button\" onClick={this.openMenu}>\n          <div className=\"button__icon\">\n            <span className=\"button__icon__bar\">&nbsp;</span>\n            <span className=\"button__icon__bar\">&nbsp;</span>\n          </div>\n          <span className=\"button__text\">Menu</span>\n        </div>\n      </div>\n    );\n  }\n}\n\n//Obter Redux State\nconst mapStateToProps = function(state) {\n  return {\n    menu: state.menu\n  };\n};\n\n//Mudar Redux State\nconst mapDispatchToProps = dispatch => {\n  return {\n    changeMenuState: menu => {\n      dispatch(MENU(menu));\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Navbar);\n"]},"metadata":{},"sourceType":"module"}